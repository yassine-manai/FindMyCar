// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/findmycar": {
            "get": {
                "description": "Find a car using the license plate number --- Token is eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\nValid LICENCE PLATE : ABCD ---",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Car Location"
                ],
                "summary": "Find a car by license plate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "License Plate",
                        "name": "license_plate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Language",
                        "name": "language",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Fuzzy Logic",
                        "name": "fuzzy_logic",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg.FindMyCarResponse"
                        }
                    }
                }
            }
        },
        "/fyc/UserAudit": {
            "get": {
                "description": "Get a list of UserAudit or a specific UserAudit by ID with optional extra data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Audit"
                ],
                "summary": "Get UserAudit or specific UserAudit by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "UserAudit ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of UserAudit or a single UserAudit",
                        "schema": {
                            "$ref": "#/definitions/pkg.UserAudit"
                        }
                    },
                    "400": {
                        "description": "Bad request: Invalid UserAudit ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "No UserAudit found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing UserAudit by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Audit"
                ],
                "summary": "Update a UserAudit by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "UserAudit ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated UserAudit data",
                        "name": "UserAudit",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.UserAudit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "UserAudit updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or ID mismatch",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "UserAudit not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to update UserAudit",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new UserAudit to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Audit"
                ],
                "summary": "Add a new UserAudit",
                "parameters": [
                    {
                        "description": "UserAudit data",
                        "name": "UserAudit",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.UserAudit"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "UserAudit created successfully",
                        "schema": {
                            "$ref": "#/definitions/pkg.UserAudit"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to create a new UserAudit",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Soft delete a UserAudit by setting the is_deleted flag to true",
                "tags": [
                    "User Audit"
                ],
                "summary": "Soft delete a UserAudit",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "UserAudit ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "UserAudit deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid UserAudit ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to delete UserAudit",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/cameraState": {
            "put": {
                "description": "Change the state of a camera (e.g., enabled/disabled) or retrieve a camera by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cameras"
                ],
                "summary": "Change camera state or retrieve cameras by ID",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Camera State",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Camera ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Number of rows affected by the state change",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad request: Invalid camera ID or state",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "No cameras found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/cameras": {
            "get": {
                "description": "Get a list of cameras or a specific camera by ID with optional extra data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cameras"
                ],
                "summary": "Get cameras or specific camera by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Camera ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Include extra information if 'yes'",
                        "name": "extra",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of cameras or a single camera",
                        "schema": {
                            "$ref": "#/definitions/pkg.Camera"
                        }
                    },
                    "400": {
                        "description": "Bad request: Invalid camera ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "No cameras found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing camera by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cameras"
                ],
                "summary": "Update a camera by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Camera ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated camera data",
                        "name": "camera",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.Camera"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Camera updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or ID mismatch",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Camera not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to update camera",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new camera to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cameras"
                ],
                "summary": "Add a new camera",
                "parameters": [
                    {
                        "description": "Camera data",
                        "name": "camera",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.Camera"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Camera created successfully",
                        "schema": {
                            "$ref": "#/definitions/pkg.Camera"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to create a new camera",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Soft delete a camera by setting the is_deleted flag to true",
                "tags": [
                    "Cameras"
                ],
                "summary": "Soft delete a camera",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Camera ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Camera deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid camera ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to delete camera",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/camerasDeleted": {
            "get": {
                "description": "Get a list of deleted cameras or a specific camera by ID with optional extra data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cameras"
                ],
                "summary": "Get deleted cameras or a specific camera by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Camera ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of deleted cameras or a single camera",
                        "schema": {
                            "$ref": "#/definitions/pkg.Camera"
                        }
                    },
                    "400": {
                        "description": "Bad request: Invalid camera ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "No cameras found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/camerasEnabled": {
            "get": {
                "description": "Get a list of enabled cameras or a specific camera by ID with optional extra data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cameras"
                ],
                "summary": "Get enabled cameras or a specific camera by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Camera ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of enabled cameras or a single camera",
                        "schema": {
                            "$ref": "#/definitions/pkg.Camera"
                        }
                    },
                    "400": {
                        "description": "Bad request: Invalid camera ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "No cameras found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/carDetails": {
            "get": {
                "description": "Get a list of all car details or a specific car detail by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Car Details"
                ],
                "summary": "Get car details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "CarDetail ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Include extra information if 'yes'",
                        "name": "extra",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg.CarDetail"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing car detail by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Car Details"
                ],
                "summary": "Update a car detail by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Car ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated car detail data",
                        "name": "CarDetail",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.CarDetail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg.CarDetail"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Car detail not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new car detail to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Car Details"
                ],
                "summary": "Add a new car detail",
                "parameters": [
                    {
                        "description": "Car detail data",
                        "name": "CarDetail",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.CarDetail"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/pkg.CarDetail"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a car detail by ID",
                "tags": [
                    "Car Details"
                ],
                "summary": "Delete a car detail",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Car detail ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Car detail deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Car detail not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/clientCreds": {
            "get": {
                "description": "Get a list of all client credentials",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Client Credentials"
                ],
                "summary": "Get all client credentials",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg.ApiKey"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new client credential to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Client Credentials"
                ],
                "summary": "Add a new client credential",
                "parameters": [
                    {
                        "description": "Client credential data",
                        "name": "clientCred",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.ApiKey"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/pkg.ApiKey"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a client credential by ID",
                "tags": [
                    "Client Credentials"
                ],
                "summary": "Delete a client credential",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Client credential deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/fyc/clientCreds/{id}": {
            "put": {
                "description": "Update an existing client credential by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Client Credentials"
                ],
                "summary": "Update a client credential",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated client credential data",
                        "name": "clientCred",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.ApiKey"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg.ApiKey"
                        }
                    }
                }
            }
        },
        "/fyc/clientEnabled": {
            "get": {
                "description": "Get a list of enabled clients or a specific client by ID with optional extra data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Client Credentials"
                ],
                "summary": "Get enabled clients or a specific client by clientID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of enabled clients or a single client",
                        "schema": {
                            "$ref": "#/definitions/pkg.ApiKey"
                        }
                    }
                }
            }
        },
        "/fyc/clientState": {
            "put": {
                "description": "Change the state of a Client (e.g., enabled/disabled) or retrieve a client by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Client Credentials"
                ],
                "summary": "Change Client state or retrieve Client by ID",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Client State",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Client ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Number of rows affected by the state change",
                        "schema": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "/fyc/clientsDeleted": {
            "get": {
                "description": "Get a list of deleted Client or a specific Client by ID with optional extra data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Client Credentials"
                ],
                "summary": "Get deleted Clients or a specific Client by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of deleted Clients or a Client Client",
                        "schema": {
                            "$ref": "#/definitions/pkg.ApiKey"
                        }
                    }
                }
            }
        },
        "/fyc/debug": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Debug"
                ],
                "summary": "Debug API",
                "responses": {}
            }
        },
        "/fyc/errors": {
            "get": {
                "description": "Get a list of all error messages or a specific one by code and language",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Errors"
                ],
                "summary": "Get all error messages or a specific one",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Error code to fetch specific error message",
                        "name": "code",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Language of the error message",
                        "name": "lang",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg.ErrorMessage"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new error message",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Errors"
                ],
                "summary": "Create a new error message",
                "parameters": [
                    {
                        "description": "Error message object",
                        "name": "errMsg",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.ErrorMessage"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/pkg.ErrorMessage"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a specific language entry from the messages field of an error message by code",
                "tags": [
                    "Errors"
                ],
                "summary": "Delete a specific language from an error message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Error message code",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Language of the error message",
                        "name": "lang",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/fyc/errors/{code}": {
            "put": {
                "description": "Update an existing error message by code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Errors"
                ],
                "summary": "Update an existing error message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Error message code",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated error message object",
                        "name": "errMsg",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.ErrorMessage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg.ErrorMessage"
                        }
                    }
                }
            }
        },
        "/fyc/history": {
            "get": {
                "description": "Get a list of all history records",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "History"
                ],
                "summary": "Get all history records",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Include extra information if 'yes'",
                        "name": "extra",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of history records",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg.PresentCarHistory"
                            }
                        }
                    },
                    "404": {
                        "description": "No history records found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new history record to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "History"
                ],
                "summary": "Add a new history record",
                "parameters": [
                    {
                        "description": "History record data",
                        "name": "history",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.PresentCarHistory"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "History record created successfully",
                        "schema": {
                            "$ref": "#/definitions/pkg.PresentCarHistory"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to create a new history record",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/history/{id}": {
            "get": {
                "description": "Get a specific history record by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "History"
                ],
                "summary": "Get history record by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "History record ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg.PresentCarHistory"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "History record not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing history record by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "History"
                ],
                "summary": "Update a history record by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "History record ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated history record data",
                        "name": "history",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.PresentCarHistory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "History record updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or ID mismatch",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "History record not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to update history record",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a history record by ID",
                "tags": [
                    "History"
                ],
                "summary": "Delete a history record by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "History record ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "History record deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "History record not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to delete history record",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/history/{lpn}": {
            "get": {
                "description": "Get a specific history record by LPN",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "History"
                ],
                "summary": "Get history record by LPN",
                "parameters": [
                    {
                        "type": "string",
                        "description": "History record LPN",
                        "name": "lpn",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg.PresentCarHistory"
                        }
                    },
                    "400": {
                        "description": "Invalid LPN format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "History record not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/presentcars": {
            "get": {
                "description": "Get a list of all present cars",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PresentCars"
                ],
                "summary": "Get all present cars",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Include extra information if 'yes'",
                        "name": "extra",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg.PresentCar"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing present car by lpn",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PresentCars"
                ],
                "summary": "Update a present car by LPN",
                "parameters": [
                    {
                        "type": "string",
                        "default": "A",
                        "description": "string default",
                        "name": "lpn",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated present car data by lpn",
                        "name": "presentCar",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.PresentCar"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg.PresentCar"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new present car to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PresentCars"
                ],
                "summary": "Add a new present car",
                "parameters": [
                    {
                        "description": "Present Car data",
                        "name": "presentCar",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.PresentCar"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/pkg.PresentCar"
                        }
                    }
                }
            }
        },
        "/fyc/presentcars/{id}": {
            "put": {
                "description": "Update an existing present car by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PresentCars"
                ],
                "summary": "Update a present car by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Present Car ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated present car data",
                        "name": "presentCar",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.PresentCar"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg.PresentCar"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a present car by ID",
                "tags": [
                    "PresentCars"
                ],
                "summary": "Delete a present car",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Present Car ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/fyc/presentcars/{lpn}": {
            "get": {
                "description": "Get a specific present car by LPN",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PresentCars"
                ],
                "summary": "Get present car by LPN",
                "parameters": [
                    {
                        "type": "string",
                        "description": "License Plate Number",
                        "name": "lpn",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Include extra information if 'yes'",
                        "name": "extra",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg.PresentCar"
                        }
                    }
                }
            }
        },
        "/fyc/settings": {
            "get": {
                "description": "Get settings by CarPark ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settings"
                ],
                "summary": "Get settings by CarPark ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "CarPark ID",
                        "name": "carpark_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg.Settings"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing settings by CarPark ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settings"
                ],
                "summary": "Update settings by CarPark ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "CarPark ID",
                        "name": "carpark_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated settings data",
                        "name": "settings",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.Settings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg.Settings"
                        }
                    }
                }
            },
            "post": {
                "description": "Add new settings for a CarPark",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settings"
                ],
                "summary": "Add new settings",
                "parameters": [
                    {
                        "description": "Settings data",
                        "name": "settings",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.Settings"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/pkg.Settings"
                        }
                    }
                }
            }
        },
        "/fyc/sign": {
            "get": {
                "description": "Get a list of sign or a specific sign by ID with optional extra data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sign"
                ],
                "summary": "Get sign or specific sign by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "sign ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Include extra information if 'yes'",
                        "name": "extra",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of sign or a single sign",
                        "schema": {
                            "$ref": "#/definitions/pkg.Sign"
                        }
                    },
                    "400": {
                        "description": "Bad request: Invalid sign ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "No sign found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing sign by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sign"
                ],
                "summary": "Update a sign by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "sign ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated sign data",
                        "name": "sign",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.Sign"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "sign updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or ID mismatch",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "sign not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to update sign",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new sign to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sign"
                ],
                "summary": "Add a new sign",
                "parameters": [
                    {
                        "description": "sign data",
                        "name": "sign",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.Sign"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "sign created successfully",
                        "schema": {
                            "$ref": "#/definitions/pkg.Sign"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to create a new sign",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Soft delete a sign by setting the is_deleted flag to true",
                "tags": [
                    "Sign"
                ],
                "summary": "Soft delete a sign",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "sign ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "sign deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid sign ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to delete sign",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/signDeleted": {
            "get": {
                "description": "Get a list of deleted sign or a specific sign by ID with optional extra data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sign"
                ],
                "summary": "Get deleted sign or a specific sign by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "sign ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of deleted sign or a single sign",
                        "schema": {
                            "$ref": "#/definitions/pkg.Sign"
                        }
                    },
                    "400": {
                        "description": "Bad request: Invalid sign ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "No sign found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/signEnabled": {
            "get": {
                "description": "Get a list of enabled sign or a specific sign by ID with optional extra data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sign"
                ],
                "summary": "Get enabled sign or a specific sign by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "sign ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of enabled sign or a single sign",
                        "schema": {
                            "$ref": "#/definitions/pkg.Sign"
                        }
                    },
                    "400": {
                        "description": "Bad request: Invalid sign ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "No sign found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/signState": {
            "put": {
                "description": "Change the state of a sign (e.g., enabled/disabled) or retrieve a sign by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sign"
                ],
                "summary": "Change sign state or retrieve sign by ID",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "sign State",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "sign ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Number of rows affected by the state change",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad request: Invalid sign ID or state",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "No sign found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/user": {
            "post": {
                "description": "Add a new User credential to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Add a new User credential",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/pkg.User"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a Use by username",
                "tags": [
                    "Users"
                ],
                "summary": "Delete a cUse",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/fyc/user/{id}": {
            "put": {
                "description": "Update an existing client credential by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update a client credential",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "username",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated client credential data",
                        "name": "clientCred",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg.User"
                        }
                    }
                }
            }
        },
        "/fyc/userDeleted": {
            "get": {
                "description": "Get a list of deleted Users or a specific User by username with optional extra data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get deleted User or a specific User by username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "username",
                        "name": "username",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of deleted Users or a User",
                        "schema": {
                            "$ref": "#/definitions/pkg.User"
                        }
                    }
                }
            }
        },
        "/fyc/userEnabled": {
            "get": {
                "description": "Get a list of enabled users or a specific user by ID with optional extra data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get enabled User or a specific User by username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserName",
                        "name": "username",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of enabled Users or a single User",
                        "schema": {
                            "$ref": "#/definitions/pkg.User"
                        }
                    }
                }
            }
        },
        "/fyc/userState": {
            "put": {
                "description": "Change the state of a user (e.g., enabled/disabled) or retrieve a user by username",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Change user state or retrieve user by username",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Client State",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Number of rows affected by the state change",
                        "schema": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "/fyc/users": {
            "get": {
                "description": "Get a list of all Users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all Users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg.User"
                            }
                        }
                    }
                }
            }
        },
        "/fyc/v1/Auth/token": {
            "post": {
                "description": "Generates a JWT token using client ID and client secret.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Test_Version1"
                ],
                "summary": "Generate a JWT token",
                "parameters": [
                    {
                        "description": "Client credentials",
                        "name": "TokenRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.TokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token generated successfully",
                        "schema": {
                            "$ref": "#/definitions/pkg.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid client credentials",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/fyc/zoneState": {
            "put": {
                "description": "Change the state of a Zone (e.g., enabled/disabled) or retrieve a Zone by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zones"
                ],
                "summary": "Change Zone state or retrieve Zones by ID",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Zone State",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Zone ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Number of rows affected by the state change",
                        "schema": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "/fyc/zones": {
            "get": {
                "description": "Get a list of all zones, or a zone by ID if 'id' parameter is provided",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zones"
                ],
                "summary": "Get all zones",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Include extra information if 'yes'",
                        "name": "extra",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Zone ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of zones or a single zone",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg.Zone"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new zone to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zones"
                ],
                "summary": "Add a new zone",
                "parameters": [
                    {
                        "description": "Zone data",
                        "name": "zone",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.Zone"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/pkg.Zone"
                        }
                    }
                }
            }
        },
        "/fyc/zones/{id}": {
            "put": {
                "description": "Update an existing zone by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zones"
                ],
                "summary": "Update a zone by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Zone ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated zone data",
                        "name": "zone",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.Zone"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg.Zone"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a zone by ID",
                "tags": [
                    "Zones"
                ],
                "summary": "Delete a zone",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Zone ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Zone deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Zone not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/zonesDeleted": {
            "get": {
                "description": "Get a list of Deleted zones or a specific zone by ID with optional extra data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zones"
                ],
                "summary": "Get Deleted zones or a specific zone by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Zone ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Deleted zones or a single zone",
                        "schema": {
                            "$ref": "#/definitions/pkg.Zone"
                        }
                    }
                }
            }
        },
        "/fyc/zonesEnabled": {
            "get": {
                "description": "Get a list of enabled zones or a specific zone by ID with optional extra data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zones"
                ],
                "summary": "Get enabled zones or a specific zone by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Zone ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of enabled zones or a single zone",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg.Zone"
                            }
                        }
                    }
                }
            }
        },
        "/fyc/zonesImage": {
            "get": {
                "description": "Get a specific zoneimage by either ID or Zone",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zones Image"
                ],
                "summary": "Get zoneimage by field",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by field (id or zone)",
                        "name": "field",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Value of the selected field",
                        "name": "value",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg.ImageZone"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new zone image to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zones Image"
                ],
                "summary": "Add a new zone Image",
                "parameters": [
                    {
                        "description": "Zone image data",
                        "name": "ImageZone",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.ImageZone"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/pkg.ImageZone"
                        }
                    }
                }
            }
        },
        "/fyc/zonesImage/{id}": {
            "put": {
                "description": "Update an existing zone image by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zones Image"
                ],
                "summary": "Update a zone image by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Zone ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated zone image data",
                        "name": "Zone",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pkg.ImageZone"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg.Zone"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Zone image not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a zone image by ID",
                "tags": [
                    "Zones Image"
                ],
                "summary": "Delete a zone image",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Zone image ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Zone image deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Zone image not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/zonesImages": {
            "get": {
                "description": "Get a list of all zones images",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zones Image"
                ],
                "summary": "Get all zones images",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Include extra information if 'yes'",
                        "name": "extra",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "choose the image type Small or Large (small or sm for Small Images / lg or large for Large )",
                        "name": "typeImage",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pkg.ImageZone"
                            }
                        }
                    }
                }
            }
        },
        "/getSettings": {
            "get": {
                "description": "Get Settings\nGet settings data --- Token is eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Car Location"
                ],
                "summary": "Get Settings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg.Settings"
                        }
                    }
                }
            }
        },
        "/getpicture": {
            "get": {
                "description": "Get an image using the picture name --- Token is eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Car Location"
                ],
                "summary": "Get a picture by picture name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Picture Name",
                        "name": "picture_name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Language",
                        "name": "language",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg.PictureResponse"
                        }
                    }
                }
            }
        },
        "/token": {
            "post": {
                "description": "Get an access token using client credentials\nValide PARAMS ---------- Client ID : 6 / Client Secret : 4711 / grant_type : client_credentials",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Car Location"
                ],
                "summary": "Get an access token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "client_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client Secret",
                        "name": "client_secret",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Grant Type",
                        "name": "grant_type",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pkg.TokenResponseTest"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "pkg.ApiKey": {
            "type": "object",
            "required": [
                "api_key",
                "client_id",
                "client_secret"
            ],
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "client_id": {
                    "type": "string"
                },
                "client_name": {
                    "type": "string"
                },
                "client_secret": {
                    "type": "string"
                },
                "fuzzy": {
                    "type": "boolean",
                    "default": false
                },
                "id": {
                    "type": "integer"
                },
                "is_deleted": {
                    "type": "boolean",
                    "default": false
                },
                "is_enabled": {
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "pkg.Camera": {
            "type": "object",
            "required": [
                "cam_id",
                "cam_ip",
                "cam_name",
                "cam_password",
                "cam_port",
                "cam_type",
                "cam_user",
                "direction",
                "extra",
                "zone_id_in",
                "zone_id_out"
            ],
            "properties": {
                "cam_id": {
                    "type": "integer"
                },
                "cam_ip": {
                    "type": "string"
                },
                "cam_name": {
                    "type": "string"
                },
                "cam_password": {
                    "type": "string"
                },
                "cam_port": {
                    "type": "integer"
                },
                "cam_type": {
                    "type": "string"
                },
                "cam_user": {
                    "type": "string"
                },
                "direction": {
                    "type": "string"
                },
                "extra": {
                    "type": "object"
                },
                "id": {
                    "type": "integer"
                },
                "is_deleted": {
                    "type": "boolean",
                    "default": false
                },
                "is_enabled": {
                    "type": "boolean",
                    "default": false
                },
                "zone_id_in": {
                    "type": "integer"
                },
                "zone_id_out": {
                    "type": "integer"
                }
            }
        },
        "pkg.CarDetail": {
            "type": "object",
            "required": [
                "cam_body",
                "extra",
                "image1",
                "image2",
                "image3"
            ],
            "properties": {
                "cam_body": {
                    "type": "object"
                },
                "extra": {
                    "type": "object"
                },
                "id": {
                    "type": "integer"
                },
                "image1": {
                    "type": "string"
                },
                "image2": {
                    "type": "string"
                },
                "image3": {
                    "type": "string"
                }
            }
        },
        "pkg.CarLocation": {
            "type": "object",
            "properties": {
                "facility": {
                    "type": "integer"
                },
                "licence": {
                    "type": "string"
                },
                "picture_name": {
                    "type": "string"
                },
                "spot_id": {
                    "type": "string"
                }
            }
        },
        "pkg.ErrorMessage": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "messages": {
                    "type": "object"
                }
            }
        },
        "pkg.FindMyCarResponse": {
            "type": "object",
            "properties": {
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pkg.CarLocation"
                    }
                },
                "response_code": {
                    "type": "integer"
                }
            }
        },
        "pkg.ImageZone": {
            "type": "object",
            "required": [
                "extra",
                "image_l",
                "image_s",
                "language",
                "zone_id"
            ],
            "properties": {
                "extra": {
                    "type": "object"
                },
                "id": {
                    "type": "integer"
                },
                "image_l": {
                    "type": "string"
                },
                "image_s": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "zone_id": {
                    "type": "integer"
                }
            }
        },
        "pkg.PictureResponse": {
            "type": "object",
            "properties": {
                "image_data": {
                    "type": "string"
                }
            }
        },
        "pkg.PresentCar": {
            "type": "object",
            "required": [
                "came ra_id",
                "car_details_id",
                "confidence",
                "currZoneID",
                "direction",
                "extra",
                "last_zone_id",
                "lpn",
                "transaction_date"
            ],
            "properties": {
                "came ra_id": {
                    "type": "integer"
                },
                "car_details_id": {
                    "type": "integer"
                },
                "confidence": {
                    "type": "integer"
                },
                "currZoneID": {
                    "type": "integer"
                },
                "direction": {
                    "type": "string"
                },
                "extra": {
                    "type": "object"
                },
                "id": {
                    "type": "integer"
                },
                "last_zone_id": {
                    "type": "integer"
                },
                "lpn": {
                    "type": "string"
                },
                "transaction_date": {
                    "type": "string"
                }
            }
        },
        "pkg.PresentCarHistory": {
            "type": "object",
            "required": [
                "cam_body",
                "cam_id",
                "confidence",
                "cur_zone_id",
                "extra",
                "image",
                "last_zone_id",
                "lpn"
            ],
            "properties": {
                "cam_body": {
                    "type": "object"
                },
                "cam_id": {
                    "type": "integer"
                },
                "confidence": {
                    "type": "integer"
                },
                "cur_zone_id": {
                    "type": "integer"
                },
                "extra": {
                    "type": "object"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "last_zone_id": {
                    "type": "integer"
                },
                "lpn": {
                    "type": "string"
                }
            }
        },
        "pkg.Settings": {
            "type": "object",
            "required": [
                "app_logo",
                "carpark_id",
                "carpark_name",
                "couting_clean_cron",
                "default_lang",
                "fyc_clean_cron",
                "timeout_screenKiosk"
            ],
            "properties": {
                "app_logo": {
                    "type": "string"
                },
                "carpark_id": {
                    "type": "integer"
                },
                "carpark_name": {
                    "type": "string"
                },
                "couting_clean_cron": {
                    "type": "string"
                },
                "default_lang": {
                    "type": "string",
                    "default": "EN"
                },
                "fyc_clean_cron": {
                    "type": "string"
                },
                "timeout_screenKiosk": {
                    "type": "integer"
                }
            }
        },
        "pkg.Sign": {
            "type": "object",
            "required": [
                "sign_id",
                "sign_ip",
                "sign_name",
                "sign_port",
                "sign_type",
                "zone_id"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "is_deleted": {
                    "type": "boolean",
                    "default": false
                },
                "is_enabled": {
                    "type": "boolean",
                    "default": false
                },
                "sign_id": {
                    "type": "integer"
                },
                "sign_ip": {
                    "type": "string"
                },
                "sign_name": {
                    "type": "string"
                },
                "sign_port": {
                    "type": "integer"
                },
                "sign_type": {
                    "type": "string"
                },
                "zone_id": {
                    "type": "integer"
                }
            }
        },
        "pkg.TokenRequest": {
            "type": "object",
            "required": [
                "clientId",
                "clientSecret"
            ],
            "properties": {
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                }
            }
        },
        "pkg.TokenResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "pkg.TokenResponseTest": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "token_type": {
                    "type": "string"
                }
            }
        },
        "pkg.User": {
            "type": "object",
            "required": [
                "first_name",
                "last_name",
                "password",
                "role",
                "username"
            ],
            "properties": {
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_deleted": {
                    "type": "boolean",
                    "default": false
                },
                "is_enabled": {
                    "type": "boolean",
                    "default": false
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "pkg.UserAudit": {
            "type": "object",
            "required": [
                "action_date",
                "module",
                "new_value",
                "old_value",
                "user_id"
            ],
            "properties": {
                "action_date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "module": {
                    "type": "string"
                },
                "new_value": {
                    "type": "object"
                },
                "old_value": {
                    "type": "object"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "pkg.Zone": {
            "type": "object",
            "required": [
                "extra",
                "free_capacity",
                "last_update",
                "max_capacity",
                "name",
                "zone_id"
            ],
            "properties": {
                "extra": {
                    "type": "object"
                },
                "free_capacity": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "is_deleted": {
                    "type": "boolean",
                    "default": false
                },
                "is_enabled": {
                    "type": "boolean",
                    "default": false
                },
                "last_update": {
                    "type": "string"
                },
                "max_capacity": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "zone_id": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Find Your Car",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
