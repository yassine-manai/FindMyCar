definitions:
  pkg.ApiManage:
    properties:
      client_id:
        type: string
      client_secret:
        type: string
      fuzzy:
        type: string
    required:
    - client_secret
    - fuzzy
    type: object
  pkg.Camera:
    properties:
      cam_ip:
        type: string
      cam_name:
        type: string
      cam_password:
        type: string
      cam_port:
        type: string
      cam_type:
        type: string
      cam_user:
        type: string
      direction:
        type: string
      extra:
        additionalProperties: true
        type: object
      id:
        type: integer
      zone_id_in:
        type: integer
      zone_id_out:
        type: integer
    required:
    - cam_ip
    - cam_name
    - cam_password
    - cam_port
    - cam_type
    - cam_user
    - direction
    - extra
    - zone_id_in
    - zone_id_out
    type: object
  pkg.CarDetail:
    properties:
      cam_body:
        additionalProperties: true
        type: object
      extra:
        additionalProperties: true
        type: object
      id:
        type: integer
      image1:
        type: string
      image2:
        type: string
      image3:
        type: string
    required:
    - cam_body
    - extra
    - image1
    - image2
    - image3
    type: object
  pkg.CarLocation:
    properties:
      facility:
        type: integer
      picture_name:
        type: string
      spot_id:
        type: string
    type: object
  pkg.Carpark:
    properties:
      capacity:
        type: integer
      extra:
        additionalProperties: true
        type: object
      id:
        type: integer
      language:
        additionalProperties: true
        type: object
      name:
        type: string
      type:
        type: string
    required:
    - capacity
    - extra
    - language
    - name
    - type
    type: object
  pkg.ErrorMessage:
    properties:
      code:
        type: string
      language:
        type: string
      message:
        type: string
    required:
    - code
    - message
    type: object
  pkg.FindMyCarResponse:
    properties:
      locations:
        items:
          $ref: '#/definitions/pkg.CarLocation'
        type: array
      response_code:
        type: integer
    type: object
  pkg.ImageZone:
    properties:
      extra:
        additionalProperties: true
        type: object
      id:
        type: integer
      image_l:
        type: string
      image_s:
        type: string
      lang:
        type: string
      zone_id:
        type: integer
    required:
    - extra
    - image_l
    - image_s
    - lang
    - zone_id
    type: object
  pkg.PictureResponse:
    properties:
      image_data:
        type: string
    type: object
  pkg.PresentCar:
    properties:
      camera_id:
        type: integer
      car_details_id:
        type: integer
      confidence:
        type: integer
      currZoneID:
        type: integer
      direction:
        type: string
      extra:
        additionalProperties: true
        type: object
      id:
        type: integer
      last_zone_id:
        type: integer
      lpn:
        type: string
      transaction_date:
        type: string
    required:
    - camera_id
    - car_details_id
    - confidence
    - currZoneID
    - direction
    - extra
    - last_zone_id
    - lpn
    - transaction_date
    type: object
  pkg.PresentCarHistory:
    properties:
      cam_body:
        additionalProperties: true
        type: object
      cam_id:
        type: integer
      confidence:
        type: integer
      cur_zone_id:
        type: integer
      extra:
        additionalProperties: true
        type: object
      id:
        type: integer
      image:
        type: string
      last_zone_id:
        type: integer
      lpn:
        type: string
    required:
    - cam_body
    - cam_id
    - confidence
    - cur_zone_id
    - extra
    - image
    - last_zone_id
    - lpn
    type: object
  pkg.Settings:
    properties:
      def_lang:
        type: string
      fuzzyLogic:
        type: boolean
      logo:
        type: string
      timeout_screenKiosk:
        type: integer
    type: object
  pkg.TokenRequest:
    properties:
      clientId:
        type: string
      clientSecret:
        type: string
    required:
    - clientId
    - clientSecret
    type: object
  pkg.TokenResponse:
    properties:
      token:
        type: string
    type: object
  pkg.TokenResponseTest:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      token_type:
        type: string
    type: object
  pkg.Zone:
    properties:
      carpark_id:
        type: integer
      description:
        type: string
      extra:
        additionalProperties: true
        type: object
      id:
        type: integer
      max_capacity:
        type: integer
      name:
        additionalProperties: true
        type: object
      present:
        type: integer
      zone_id:
        type: integer
    required:
    - carpark_id
    - description
    - extra
    - max_capacity
    - name
    - present
    - zone_id
    type: object
info:
  contact: {}
  title: Find Your Car
  version: "1.0"
paths:
  /findmycar:
    get:
      consumes:
      - application/json
      description: |-
        Find a car using the license plate number --- Token is eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        Valid LICENCE PLATE : ABCD ---
      parameters:
      - description: License Plate
        in: query
        name: license_plate
        required: true
        type: string
      - description: Language
        in: query
        name: language
        required: true
        type: string
      - description: Fuzzy Logic
        in: query
        name: fuzzy_logic
        required: true
        type: boolean
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.FindMyCarResponse'
      summary: Find a car by license plate
      tags:
      - Car Location
  /fyc/cameras:
    delete:
      description: Delete a camera by ID
      parameters:
      - description: Camera ID
        in: query
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Camera deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid ID format
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Camera not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to delete camera
          schema:
            additionalProperties: true
            type: object
      summary: Delete a camera by ID
      tags:
      - Cameras
    get:
      description: Get a list of cameras or a specific camera by ID with optional
        extra data
      parameters:
      - description: Camera ID
        in: query
        name: id
        type: string
      - description: Include extra information if 'yes'
        in: query
        name: extra
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of cameras or a single camera
          schema:
            $ref: '#/definitions/pkg.Camera'
        "400":
          description: 'Bad request: Invalid camera ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: No cameras found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get cameras or specific camera by ID
      tags:
      - Cameras
    post:
      consumes:
      - application/json
      description: Add a new camera to the database
      parameters:
      - description: Camera data
        in: body
        name: camera
        required: true
        schema:
          $ref: '#/definitions/pkg.Camera'
      produces:
      - application/json
      responses:
        "201":
          description: Camera created successfully
          schema:
            $ref: '#/definitions/pkg.Camera'
        "400":
          description: Invalid request payload
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to create a new camera
          schema:
            additionalProperties: true
            type: object
      summary: Add a new camera
      tags:
      - Cameras
    put:
      consumes:
      - application/json
      description: Update an existing camera by ID
      parameters:
      - description: Camera ID
        in: query
        name: id
        required: true
        type: integer
      - description: Updated camera data
        in: body
        name: camera
        required: true
        schema:
          $ref: '#/definitions/pkg.Camera'
      produces:
      - application/json
      responses:
        "200":
          description: Camera updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request payload or ID mismatch
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Camera not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to update camera
          schema:
            additionalProperties: true
            type: object
      summary: Update a camera by ID
      tags:
      - Cameras
  /fyc/carDetails:
    delete:
      description: Delete a car detail by ID
      parameters:
      - description: Car detail ID
        in: query
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Car detail deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Car detail not found
          schema:
            additionalProperties: true
            type: object
      summary: Delete a car detail
      tags:
      - Car Details
    get:
      description: Get a list of all car details or a specific car detail by ID
      parameters:
      - description: CarDetail ID
        in: query
        name: id
        type: integer
      - description: Include extra information if 'yes'
        in: query
        name: extra
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/pkg.CarDetail'
            type: array
      summary: Get car details
      tags:
      - Car Details
    post:
      consumes:
      - application/json
      description: Add a new car detail to the database
      parameters:
      - description: Car detail data
        in: body
        name: CarDetail
        required: true
        schema:
          $ref: '#/definitions/pkg.CarDetail'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pkg.CarDetail'
      summary: Add a new car detail
      tags:
      - Car Details
    put:
      consumes:
      - application/json
      description: Update an existing car detail by ID
      parameters:
      - description: Car ID
        in: query
        name: id
        required: true
        type: integer
      - description: Updated car detail data
        in: body
        name: CarDetail
        required: true
        schema:
          $ref: '#/definitions/pkg.CarDetail'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.CarDetail'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Car detail not found
          schema:
            additionalProperties: true
            type: object
      summary: Update a car detail by ID
      tags:
      - Car Details
  /fyc/carparks:
    get:
      description: Get a list of all carparks
      parameters:
      - description: Include extra information if 'yes'
        in: query
        name: extra
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/pkg.Carpark'
            type: array
      summary: Get all carparks
      tags:
      - Carparks
    post:
      consumes:
      - application/json
      description: Add a new carpark to the database
      parameters:
      - description: Carpark data
        in: body
        name: carpark
        required: true
        schema:
          $ref: '#/definitions/pkg.Carpark'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pkg.Carpark'
      summary: Add a new carpark
      tags:
      - Carparks
  /fyc/carparks/{id}:
    delete:
      description: Delete a carpark by ID
      parameters:
      - description: Carpark ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Carpark deleted successfully
          schema:
            type: string
      summary: Delete a carpark
      tags:
      - Carparks
    get:
      description: Get a specific carpark by ID
      parameters:
      - description: Carpark ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.Carpark'
      summary: Get carpark by ID
      tags:
      - Carparks
    put:
      consumes:
      - application/json
      description: Update an existing carpark by ID
      parameters:
      - description: Carpark ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated carpark data
        in: body
        name: carpark
        required: true
        schema:
          $ref: '#/definitions/pkg.Carpark'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.Carpark'
      summary: Update a carpark
      tags:
      - Carparks
  /fyc/clientCreds:
    get:
      description: Get a list of all client credentials
      parameters:
      - description: Include extra information if 'yes'
        in: query
        name: extra
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/pkg.ApiManage'
            type: array
      summary: Get all client credentials
      tags:
      - Client Credentials
    post:
      consumes:
      - application/json
      description: Add a new client credential to the database
      parameters:
      - description: Client credential data
        in: body
        name: clientCred
        required: true
        schema:
          $ref: '#/definitions/pkg.ApiManage'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pkg.ApiManage'
      summary: Add a new client credential
      tags:
      - Client Credentials
  /fyc/clientCreds/{id}:
    delete:
      description: Delete a client credential by ID
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Client credential deleted successfully
          schema:
            type: string
      summary: Delete a client credential
      tags:
      - Client Credentials
    get:
      description: Get a specific client credential by ID
      parameters:
      - description: Client ID
        in: path
        name: client_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.ApiManage'
      summary: Get client credential by ID
      tags:
      - Client Credentials
    put:
      consumes:
      - application/json
      description: Update an existing client credential by ID
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated client credential data
        in: body
        name: clientCred
        required: true
        schema:
          $ref: '#/definitions/pkg.ApiManage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.ApiManage'
      summary: Update a client credential
      tags:
      - Client Credentials
  /fyc/debug:
    get:
      produces:
      - application/json
      responses: {}
      summary: Debug API
      tags:
      - Debug
  /fyc/errors:
    get:
      description: Get a list of all error messages or a specific one by code
      parameters:
      - description: Error code to fetch specific error message
        in: query
        name: code
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/pkg.ErrorMessage'
            type: array
      summary: Get all error messages or specific one
      tags:
      - Errors
    post:
      consumes:
      - application/json
      description: Create a new error message
      parameters:
      - description: Error message object
        in: body
        name: errMsg
        required: true
        schema:
          $ref: '#/definitions/pkg.ErrorMessage'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pkg.ErrorMessage'
      summary: Create a new error message
      tags:
      - Errors
  /fyc/errors/{code}:
    delete:
      description: Delete an error message by code
      parameters:
      - description: Error message code
        in: path
        name: code
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete an error message
      tags:
      - Errors
    put:
      consumes:
      - application/json
      description: Update an existing error message by code
      parameters:
      - description: Error message code
        in: query
        name: code
        required: true
        type: string
      - description: Updated error message object
        in: body
        name: errMsg
        required: true
        schema:
          $ref: '#/definitions/pkg.ErrorMessage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.ErrorMessage'
      summary: Update an existing error message
      tags:
      - Errors
  /fyc/history:
    get:
      description: Get a list of all history records
      parameters:
      - description: Include extra information if 'yes'
        in: query
        name: extra
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of history records
          schema:
            items:
              $ref: '#/definitions/pkg.PresentCarHistory'
            type: array
        "404":
          description: No history records found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get all history records
      tags:
      - History
    post:
      consumes:
      - application/json
      description: Add a new history record to the database
      parameters:
      - description: History record data
        in: body
        name: history
        required: true
        schema:
          $ref: '#/definitions/pkg.PresentCarHistory'
      produces:
      - application/json
      responses:
        "201":
          description: History record created successfully
          schema:
            $ref: '#/definitions/pkg.PresentCarHistory'
        "400":
          description: Invalid request payload
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to create a new history record
          schema:
            additionalProperties: true
            type: object
      summary: Add a new history record
      tags:
      - History
  /fyc/history/{id}:
    delete:
      description: Delete a history record by ID
      parameters:
      - description: History record ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: History record deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid ID format
          schema:
            additionalProperties: true
            type: object
        "404":
          description: History record not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to delete history record
          schema:
            additionalProperties: true
            type: object
      summary: Delete a history record by ID
      tags:
      - History
    get:
      description: Get a specific history record by ID
      parameters:
      - description: History record ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.PresentCarHistory'
        "400":
          description: Invalid ID format
          schema:
            additionalProperties: true
            type: object
        "404":
          description: History record not found
          schema:
            additionalProperties: true
            type: object
      summary: Get history record by ID
      tags:
      - History
    put:
      consumes:
      - application/json
      description: Update an existing history record by ID
      parameters:
      - description: History record ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated history record data
        in: body
        name: history
        required: true
        schema:
          $ref: '#/definitions/pkg.PresentCarHistory'
      produces:
      - application/json
      responses:
        "200":
          description: History record updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request payload or ID mismatch
          schema:
            additionalProperties: true
            type: object
        "404":
          description: History record not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to update history record
          schema:
            additionalProperties: true
            type: object
      summary: Update a history record by ID
      tags:
      - History
  /fyc/history/{lpn}:
    get:
      description: Get a specific history record by LPN
      parameters:
      - description: History record LPN
        in: path
        name: lpn
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.PresentCarHistory'
        "400":
          description: Invalid LPN format
          schema:
            additionalProperties: true
            type: object
        "404":
          description: History record not found
          schema:
            additionalProperties: true
            type: object
      summary: Get history record by LPN
      tags:
      - History
  /fyc/presentcars:
    get:
      description: Get a list of all present cars
      parameters:
      - description: Include extra information if 'yes'
        in: query
        name: extra
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/pkg.PresentCar'
            type: array
      summary: Get all present cars
      tags:
      - PresentCars
    post:
      consumes:
      - application/json
      description: Add a new present car to the database
      parameters:
      - description: Present Car data
        in: body
        name: presentCar
        required: true
        schema:
          $ref: '#/definitions/pkg.PresentCar'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pkg.PresentCar'
      summary: Add a new present car
      tags:
      - PresentCars
    put:
      consumes:
      - application/json
      description: Update an existing present car by lpn
      parameters:
      - default: A
        description: string default
        in: query
        name: lpn
        required: true
        type: string
      - description: Updated present car data by lpn
        in: body
        name: presentCar
        required: true
        schema:
          $ref: '#/definitions/pkg.PresentCar'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.PresentCar'
      summary: Update a present car by LPN
      tags:
      - PresentCars
  /fyc/presentcars/{id}:
    delete:
      description: Delete a present car by ID
      parameters:
      - description: Present Car ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Delete a present car
      tags:
      - PresentCars
    put:
      consumes:
      - application/json
      description: Update an existing present car by ID
      parameters:
      - description: Present Car ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated present car data
        in: body
        name: presentCar
        required: true
        schema:
          $ref: '#/definitions/pkg.PresentCar'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.PresentCar'
      summary: Update a present car by ID
      tags:
      - PresentCars
  /fyc/presentcars/{lpn}:
    get:
      description: Get a specific present car by LPN
      parameters:
      - description: License Plate Number
        in: path
        name: lpn
        required: true
        type: string
      - description: Include extra information if 'yes'
        in: query
        name: extra
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.PresentCar'
      summary: Get present car by LPN
      tags:
      - PresentCars
  /fyc/v1/Auth/token:
    post:
      consumes:
      - application/json
      description: Generates a JWT token using client ID and client secret.
      parameters:
      - description: Client credentials
        in: body
        name: TokenRequest
        required: true
        schema:
          $ref: '#/definitions/pkg.TokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token generated successfully
          schema:
            $ref: '#/definitions/pkg.TokenResponse'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: Invalid client credentials
          schema:
            type: string
        "405":
          description: Method not allowed
          schema:
            type: string
      summary: Generate a JWT token
      tags:
      - Test_Version1
  /fyc/zones:
    get:
      description: Get a list of all zones
      parameters:
      - description: Include extra information if 'yes'
        in: query
        name: extra
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/pkg.Zone'
            type: array
      summary: Get all zones
      tags:
      - Zones
    post:
      consumes:
      - application/json
      description: Add a new zone to the database
      parameters:
      - description: Zone data
        in: body
        name: zone
        required: true
        schema:
          $ref: '#/definitions/pkg.Zone'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pkg.Zone'
      summary: Add a new zone
      tags:
      - Zones
  /fyc/zones/{id}:
    delete:
      description: Delete a zone by ID
      parameters:
      - description: Zone ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Zone deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Zone not found
          schema:
            additionalProperties: true
            type: object
      summary: Delete a zone
      tags:
      - Zones
    get:
      description: Get a specific zone by ID
      parameters:
      - description: Zone ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.Zone'
      summary: Get zone by ID
      tags:
      - Zones
    put:
      consumes:
      - application/json
      description: Update an existing zone by ID
      parameters:
      - description: Zone ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated zone data
        in: body
        name: zone
        required: true
        schema:
          $ref: '#/definitions/pkg.Zone'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.Zone'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Zone not found
          schema:
            additionalProperties: true
            type: object
      summary: Update a zone by ID
      tags:
      - Zones
  /fyc/zonesImage:
    get:
      description: Get a specific zoneimage by either ID or Zone
      parameters:
      - description: Search by field (id or zone)
        in: query
        name: field
        required: true
        type: string
      - description: Value of the selected field
        in: query
        name: value
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.ImageZone'
      summary: Get zoneimage by field
      tags:
      - Zones Image
    post:
      consumes:
      - application/json
      description: Add a new zone image to the database
      parameters:
      - description: Zone image data
        in: body
        name: ImageZone
        required: true
        schema:
          $ref: '#/definitions/pkg.ImageZone'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pkg.ImageZone'
      summary: Add a new zone Image
      tags:
      - Zones Image
  /fyc/zonesImage/{id}:
    delete:
      description: Delete a zone image by ID
      parameters:
      - description: Zone image ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Zone image deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Zone image not found
          schema:
            additionalProperties: true
            type: object
      summary: Delete a zone image
      tags:
      - Zones Image
    put:
      consumes:
      - application/json
      description: Update an existing zone image by ID
      parameters:
      - description: Zone ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated zone image data
        in: body
        name: Zone
        required: true
        schema:
          $ref: '#/definitions/pkg.ImageZone'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.Zone'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Zone image not found
          schema:
            additionalProperties: true
            type: object
      summary: Update a zone image by ID
      tags:
      - Zones Image
  /fyc/zonesImages:
    get:
      description: Get a list of all zones images
      parameters:
      - description: Include extra information if 'yes'
        in: query
        name: extra
        type: string
      - description: choose the image type Small or Large (small or sm for Small Images
          / lg or large for Large )
        in: query
        name: typeImage
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/pkg.ImageZone'
            type: array
      summary: Get all zones images
      tags:
      - Zones Image
  /getSettings:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: |-
        Get Settings
        Get settings data --- Token is eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.Settings'
      summary: Get Settings
      tags:
      - Car Location
  /getpicture:
    get:
      description: Get an image using the picture name --- Token is eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
      parameters:
      - description: Picture Name
        in: query
        name: picture_name
        required: true
        type: string
      - description: Language
        in: query
        name: language
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.PictureResponse'
      summary: Get a picture by picture name
      tags:
      - Car Location
  /token:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: |-
        Get an access token using client credentials
        Valide PARAMS ---------- Client ID : 6 / Client Secret : 4711 / grant_type : client_credentials
      parameters:
      - description: Client ID
        in: formData
        name: client_id
        required: true
        type: string
      - description: Client Secret
        in: formData
        name: client_secret
        required: true
        type: string
      - description: Grant Type
        in: formData
        name: grant_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.TokenResponseTest'
      summary: Get an access token
      tags:
      - Car Location
swagger: "2.0"
