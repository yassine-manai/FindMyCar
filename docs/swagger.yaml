definitions:
  pkg.ApiKey:
    properties:
      api_key:
        type: string
      client_id:
        type: string
      client_name:
        type: string
      client_secret:
        type: string
      fuzzy:
        default: false
        type: boolean
      id:
        type: integer
      is_deleted:
        default: false
        type: boolean
      is_enabled:
        default: false
        type: boolean
    required:
    - api_key
    - client_id
    - client_secret
    type: object
  pkg.Camera:
    properties:
      cam_id:
        type: integer
      cam_ip:
        type: string
      cam_name:
        type: string
      cam_password:
        type: string
      cam_port:
        type: integer
      cam_type:
        type: string
      cam_user:
        type: string
      direction:
        type: string
      extra:
        type: object
      id:
        type: integer
      is_deleted:
        default: false
        type: boolean
      is_enabled:
        default: false
        type: boolean
      zone_id_in:
        type: integer
      zone_id_out:
        type: integer
    required:
    - cam_id
    - cam_ip
    - cam_name
    - cam_password
    - cam_port
    - cam_type
    - cam_user
    - direction
    - extra
    - zone_id_in
    - zone_id_out
    type: object
  pkg.CarDetail:
    properties:
      cam_body:
        type: object
      extra:
        type: object
      id:
        type: integer
      image1:
        type: string
      image2:
        type: string
      image3:
        type: string
    required:
    - cam_body
    - extra
    - image1
    - image2
    - image3
    type: object
  pkg.CarLocation:
    properties:
      facility:
        type: integer
      licence:
        type: string
      picture_name:
        type: string
      spot_id:
        type: string
    type: object
  pkg.ErrorMessage:
    properties:
      code:
        type: integer
      messages:
        type: object
    type: object
  pkg.FindMyCarResponse:
    properties:
      locations:
        items:
          $ref: '#/definitions/pkg.CarLocation'
        type: array
      response_code:
        type: integer
    type: object
  pkg.ImageZone:
    properties:
      extra:
        type: object
      id:
        type: integer
      image_l:
        type: string
      image_s:
        type: string
      language:
        type: string
      zone_id:
        type: integer
    required:
    - extra
    - image_l
    - image_s
    - language
    - zone_id
    type: object
  pkg.PictureResponse:
    properties:
      image_data:
        type: string
    type: object
  pkg.PresentCar:
    properties:
      came ra_id:
        type: integer
      car_details_id:
        type: integer
      confidence:
        type: integer
      currZoneID:
        type: integer
      direction:
        type: string
      extra:
        type: object
      id:
        type: integer
      last_zone_id:
        type: integer
      lpn:
        type: string
      transaction_date:
        type: string
    required:
    - came ra_id
    - car_details_id
    - confidence
    - currZoneID
    - direction
    - extra
    - last_zone_id
    - lpn
    - transaction_date
    type: object
  pkg.PresentCarHistory:
    properties:
      cam_body:
        type: object
      cam_id:
        type: integer
      confidence:
        type: integer
      cur_zone_id:
        type: integer
      extra:
        type: object
      id:
        type: integer
      image:
        type: string
      last_zone_id:
        type: integer
      lpn:
        type: string
    required:
    - cam_body
    - cam_id
    - confidence
    - cur_zone_id
    - extra
    - image
    - last_zone_id
    - lpn
    type: object
  pkg.Settings:
    properties:
      app_logo:
        type: string
      carpark_id:
        type: integer
      carpark_name:
        type: string
      couting_clean_cron:
        type: string
      default_lang:
        default: EN
        type: string
      fyc_clean_cron:
        type: string
      timeout_screenKiosk:
        type: integer
    required:
    - app_logo
    - carpark_id
    - carpark_name
    - couting_clean_cron
    - default_lang
    - fyc_clean_cron
    - timeout_screenKiosk
    type: object
  pkg.Sign:
    properties:
      id:
        type: integer
      is_deleted:
        default: false
        type: boolean
      is_enabled:
        default: false
        type: boolean
      sign_id:
        type: integer
      sign_ip:
        type: string
      sign_name:
        type: string
      sign_port:
        type: integer
      sign_type:
        type: string
      zone_id:
        type: integer
    required:
    - sign_id
    - sign_ip
    - sign_name
    - sign_port
    - sign_type
    - zone_id
    type: object
  pkg.TokenRequest:
    properties:
      clientId:
        type: string
      clientSecret:
        type: string
    required:
    - clientId
    - clientSecret
    type: object
  pkg.TokenResponse:
    properties:
      token:
        type: string
    type: object
  pkg.TokenResponseTest:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      token_type:
        type: string
    type: object
  pkg.User:
    properties:
      first_name:
        type: string
      id:
        type: integer
      is_deleted:
        default: false
        type: boolean
      is_enabled:
        default: false
        type: boolean
      last_name:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - first_name
    - last_name
    - password
    - role
    - username
    type: object
  pkg.UserAudit:
    properties:
      action_date:
        type: string
      id:
        type: integer
      module:
        type: string
      new_value:
        type: object
      old_value:
        type: object
      user_id:
        type: integer
    required:
    - action_date
    - module
    - new_value
    - old_value
    - user_id
    type: object
  pkg.Zone:
    properties:
      extra:
        type: object
      free_capacity:
        type: integer
      id:
        type: integer
      is_deleted:
        default: false
        type: boolean
      is_enabled:
        default: false
        type: boolean
      last_update:
        type: string
      max_capacity:
        type: integer
      name:
        type: string
      zone_id:
        type: integer
    required:
    - extra
    - free_capacity
    - last_update
    - max_capacity
    - name
    - zone_id
    type: object
info:
  contact: {}
  title: Find Your Car
  version: "1.0"
paths:
  /findmycar:
    get:
      consumes:
      - application/json
      description: |-
        Find a car using the license plate number --- Token is eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        Valid LICENCE PLATE : ABCD ---
      parameters:
      - description: License Plate
        in: query
        name: license_plate
        required: true
        type: string
      - description: Language
        in: query
        name: language
        required: true
        type: string
      - description: Fuzzy Logic
        in: query
        name: fuzzy_logic
        required: true
        type: boolean
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.FindMyCarResponse'
      summary: Find a car by license plate
      tags:
      - Car Location
  /fyc/UserAudit:
    delete:
      description: Soft delete a UserAudit by setting the is_deleted flag to true
      parameters:
      - description: UserAudit ID
        in: query
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: UserAudit deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid UserAudit ID
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to delete UserAudit
          schema:
            additionalProperties: true
            type: object
      summary: Soft delete a UserAudit
      tags:
      - User Audit
    get:
      description: Get a list of UserAudit or a specific UserAudit by ID with optional
        extra data
      parameters:
      - description: UserAudit ID
        in: query
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of UserAudit or a single UserAudit
          schema:
            $ref: '#/definitions/pkg.UserAudit'
        "400":
          description: 'Bad request: Invalid UserAudit ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: No UserAudit found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get UserAudit or specific UserAudit by ID
      tags:
      - User Audit
    post:
      consumes:
      - application/json
      description: Add a new UserAudit to the database
      parameters:
      - description: UserAudit data
        in: body
        name: UserAudit
        required: true
        schema:
          $ref: '#/definitions/pkg.UserAudit'
      produces:
      - application/json
      responses:
        "201":
          description: UserAudit created successfully
          schema:
            $ref: '#/definitions/pkg.UserAudit'
        "400":
          description: Invalid request payload
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to create a new UserAudit
          schema:
            additionalProperties: true
            type: object
      summary: Add a new UserAudit
      tags:
      - User Audit
    put:
      consumes:
      - application/json
      description: Update an existing UserAudit by ID
      parameters:
      - description: UserAudit ID
        in: query
        name: id
        required: true
        type: integer
      - description: Updated UserAudit data
        in: body
        name: UserAudit
        required: true
        schema:
          $ref: '#/definitions/pkg.UserAudit'
      produces:
      - application/json
      responses:
        "200":
          description: UserAudit updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request payload or ID mismatch
          schema:
            additionalProperties: true
            type: object
        "404":
          description: UserAudit not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to update UserAudit
          schema:
            additionalProperties: true
            type: object
      summary: Update a UserAudit by ID
      tags:
      - User Audit
  /fyc/cameraState:
    put:
      description: Change the state of a camera (e.g., enabled/disabled) or retrieve
        a camera by ID
      parameters:
      - description: Camera State
        in: query
        name: state
        type: boolean
      - description: Camera ID
        in: query
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Number of rows affected by the state change
          schema:
            type: integer
        "400":
          description: 'Bad request: Invalid camera ID or state'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: No cameras found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Change camera state or retrieve cameras by ID
      tags:
      - Cameras
  /fyc/cameras:
    delete:
      description: Soft delete a camera by setting the is_deleted flag to true
      parameters:
      - description: Camera ID
        in: query
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Camera deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid camera ID
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to delete camera
          schema:
            additionalProperties: true
            type: object
      summary: Soft delete a camera
      tags:
      - Cameras
    get:
      description: Get a list of cameras or a specific camera by ID with optional
        extra data
      parameters:
      - description: Camera ID
        in: query
        name: id
        type: string
      - description: Include extra information if 'yes'
        in: query
        name: extra
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of cameras or a single camera
          schema:
            $ref: '#/definitions/pkg.Camera'
        "400":
          description: 'Bad request: Invalid camera ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: No cameras found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get cameras or specific camera by ID
      tags:
      - Cameras
    post:
      consumes:
      - application/json
      description: Add a new camera to the database
      parameters:
      - description: Camera data
        in: body
        name: camera
        required: true
        schema:
          $ref: '#/definitions/pkg.Camera'
      produces:
      - application/json
      responses:
        "201":
          description: Camera created successfully
          schema:
            $ref: '#/definitions/pkg.Camera'
        "400":
          description: Invalid request payload
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to create a new camera
          schema:
            additionalProperties: true
            type: object
      summary: Add a new camera
      tags:
      - Cameras
    put:
      consumes:
      - application/json
      description: Update an existing camera by ID
      parameters:
      - description: Camera ID
        in: query
        name: id
        required: true
        type: integer
      - description: Updated camera data
        in: body
        name: camera
        required: true
        schema:
          $ref: '#/definitions/pkg.Camera'
      produces:
      - application/json
      responses:
        "200":
          description: Camera updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request payload or ID mismatch
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Camera not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to update camera
          schema:
            additionalProperties: true
            type: object
      summary: Update a camera by ID
      tags:
      - Cameras
  /fyc/camerasDeleted:
    get:
      description: Get a list of deleted cameras or a specific camera by ID with optional
        extra data
      parameters:
      - description: Camera ID
        in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of deleted cameras or a single camera
          schema:
            $ref: '#/definitions/pkg.Camera'
        "400":
          description: 'Bad request: Invalid camera ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: No cameras found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get deleted cameras or a specific camera by ID
      tags:
      - Cameras
  /fyc/camerasEnabled:
    get:
      description: Get a list of enabled cameras or a specific camera by ID with optional
        extra data
      parameters:
      - description: Camera ID
        in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of enabled cameras or a single camera
          schema:
            $ref: '#/definitions/pkg.Camera'
        "400":
          description: 'Bad request: Invalid camera ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: No cameras found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get enabled cameras or a specific camera by ID
      tags:
      - Cameras
  /fyc/carDetails:
    delete:
      description: Delete a car detail by ID
      parameters:
      - description: Car detail ID
        in: query
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Car detail deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Car detail not found
          schema:
            additionalProperties: true
            type: object
      summary: Delete a car detail
      tags:
      - Car Details
    get:
      description: Get a list of all car details or a specific car detail by ID
      parameters:
      - description: CarDetail ID
        in: query
        name: id
        type: integer
      - description: Include extra information if 'yes'
        in: query
        name: extra
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/pkg.CarDetail'
            type: array
      summary: Get car details
      tags:
      - Car Details
    post:
      consumes:
      - application/json
      description: Add a new car detail to the database
      parameters:
      - description: Car detail data
        in: body
        name: CarDetail
        required: true
        schema:
          $ref: '#/definitions/pkg.CarDetail'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pkg.CarDetail'
      summary: Add a new car detail
      tags:
      - Car Details
    put:
      consumes:
      - application/json
      description: Update an existing car detail by ID
      parameters:
      - description: Car ID
        in: query
        name: id
        required: true
        type: integer
      - description: Updated car detail data
        in: body
        name: CarDetail
        required: true
        schema:
          $ref: '#/definitions/pkg.CarDetail'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.CarDetail'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Car detail not found
          schema:
            additionalProperties: true
            type: object
      summary: Update a car detail by ID
      tags:
      - Car Details
  /fyc/clientCreds:
    delete:
      description: Delete a client credential by ID
      parameters:
      - description: Client ID
        in: query
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Client credential deleted successfully
          schema:
            type: string
      summary: Delete a client credential
      tags:
      - Client Credentials
    get:
      description: Get a list of all client credentials
      parameters:
      - description: Client ID
        in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/pkg.ApiKey'
            type: array
      summary: Get all client credentials
      tags:
      - Client Credentials
    post:
      consumes:
      - application/json
      description: Add a new client credential to the database
      parameters:
      - description: Client credential data
        in: body
        name: clientCred
        required: true
        schema:
          $ref: '#/definitions/pkg.ApiKey'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pkg.ApiKey'
      summary: Add a new client credential
      tags:
      - Client Credentials
  /fyc/clientCreds/{id}:
    put:
      consumes:
      - application/json
      description: Update an existing client credential by ID
      parameters:
      - description: Client ID
        in: query
        name: id
        required: true
        type: string
      - description: Updated client credential data
        in: body
        name: clientCred
        required: true
        schema:
          $ref: '#/definitions/pkg.ApiKey'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.ApiKey'
      summary: Update a client credential
      tags:
      - Client Credentials
  /fyc/clientEnabled:
    get:
      description: Get a list of enabled clients or a specific client by ID with optional
        extra data
      parameters:
      - description: Client ID
        in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of enabled clients or a single client
          schema:
            $ref: '#/definitions/pkg.ApiKey'
      summary: Get enabled clients or a specific client by clientID
      tags:
      - Client Credentials
  /fyc/clientState:
    put:
      description: Change the state of a Client (e.g., enabled/disabled) or retrieve
        a client by ID
      parameters:
      - description: Client State
        in: query
        name: state
        type: boolean
      - description: Client ID
        in: query
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Number of rows affected by the state change
          schema:
            type: integer
      summary: Change Client state or retrieve Client by ID
      tags:
      - Client Credentials
  /fyc/clientsDeleted:
    get:
      description: Get a list of deleted Client or a specific Client by ID with optional
        extra data
      parameters:
      - description: Client ID
        in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of deleted Clients or a Client Client
          schema:
            $ref: '#/definitions/pkg.ApiKey'
      summary: Get deleted Clients or a specific Client by ID
      tags:
      - Client Credentials
  /fyc/debug:
    get:
      produces:
      - application/json
      responses: {}
      summary: Debug API
      tags:
      - Debug
  /fyc/errors:
    delete:
      description: Delete a specific language entry from the messages field of an
        error message by code
      parameters:
      - description: Error message code
        in: query
        name: code
        required: true
        type: string
      - description: Language of the error message
        in: query
        name: lang
        required: true
        type: string
      responses: {}
      summary: Delete a specific language from an error message
      tags:
      - Errors
    get:
      description: Get a list of all error messages or a specific one by code and
        language
      parameters:
      - description: Error code to fetch specific error message
        in: query
        name: code
        type: string
      - description: Language of the error message
        in: query
        name: lang
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/pkg.ErrorMessage'
            type: array
      summary: Get all error messages or a specific one
      tags:
      - Errors
    post:
      consumes:
      - application/json
      description: Create a new error message
      parameters:
      - description: Error message object
        in: body
        name: errMsg
        required: true
        schema:
          $ref: '#/definitions/pkg.ErrorMessage'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pkg.ErrorMessage'
      summary: Create a new error message
      tags:
      - Errors
  /fyc/errors/{code}:
    put:
      consumes:
      - application/json
      description: Update an existing error message by code
      parameters:
      - description: Error message code
        in: query
        name: code
        required: true
        type: string
      - description: Updated error message object
        in: body
        name: errMsg
        required: true
        schema:
          $ref: '#/definitions/pkg.ErrorMessage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.ErrorMessage'
      summary: Update an existing error message
      tags:
      - Errors
  /fyc/history:
    get:
      description: Get a list of all history records
      parameters:
      - description: Include extra information if 'yes'
        in: query
        name: extra
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of history records
          schema:
            items:
              $ref: '#/definitions/pkg.PresentCarHistory'
            type: array
        "404":
          description: No history records found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get all history records
      tags:
      - History
    post:
      consumes:
      - application/json
      description: Add a new history record to the database
      parameters:
      - description: History record data
        in: body
        name: history
        required: true
        schema:
          $ref: '#/definitions/pkg.PresentCarHistory'
      produces:
      - application/json
      responses:
        "201":
          description: History record created successfully
          schema:
            $ref: '#/definitions/pkg.PresentCarHistory'
        "400":
          description: Invalid request payload
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to create a new history record
          schema:
            additionalProperties: true
            type: object
      summary: Add a new history record
      tags:
      - History
  /fyc/history/{id}:
    delete:
      description: Delete a history record by ID
      parameters:
      - description: History record ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: History record deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid ID format
          schema:
            additionalProperties: true
            type: object
        "404":
          description: History record not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to delete history record
          schema:
            additionalProperties: true
            type: object
      summary: Delete a history record by ID
      tags:
      - History
    get:
      description: Get a specific history record by ID
      parameters:
      - description: History record ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.PresentCarHistory'
        "400":
          description: Invalid ID format
          schema:
            additionalProperties: true
            type: object
        "404":
          description: History record not found
          schema:
            additionalProperties: true
            type: object
      summary: Get history record by ID
      tags:
      - History
    put:
      consumes:
      - application/json
      description: Update an existing history record by ID
      parameters:
      - description: History record ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated history record data
        in: body
        name: history
        required: true
        schema:
          $ref: '#/definitions/pkg.PresentCarHistory'
      produces:
      - application/json
      responses:
        "200":
          description: History record updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request payload or ID mismatch
          schema:
            additionalProperties: true
            type: object
        "404":
          description: History record not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to update history record
          schema:
            additionalProperties: true
            type: object
      summary: Update a history record by ID
      tags:
      - History
  /fyc/history/{lpn}:
    get:
      description: Get a specific history record by LPN
      parameters:
      - description: History record LPN
        in: path
        name: lpn
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.PresentCarHistory'
        "400":
          description: Invalid LPN format
          schema:
            additionalProperties: true
            type: object
        "404":
          description: History record not found
          schema:
            additionalProperties: true
            type: object
      summary: Get history record by LPN
      tags:
      - History
  /fyc/presentcars:
    get:
      description: Get a list of all present cars
      parameters:
      - description: Include extra information if 'yes'
        in: query
        name: extra
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/pkg.PresentCar'
            type: array
      summary: Get all present cars
      tags:
      - PresentCars
    post:
      consumes:
      - application/json
      description: Add a new present car to the database
      parameters:
      - description: Present Car data
        in: body
        name: presentCar
        required: true
        schema:
          $ref: '#/definitions/pkg.PresentCar'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pkg.PresentCar'
      summary: Add a new present car
      tags:
      - PresentCars
    put:
      consumes:
      - application/json
      description: Update an existing present car by lpn
      parameters:
      - default: A
        description: string default
        in: query
        name: lpn
        required: true
        type: string
      - description: Updated present car data by lpn
        in: body
        name: presentCar
        required: true
        schema:
          $ref: '#/definitions/pkg.PresentCar'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.PresentCar'
      summary: Update a present car by LPN
      tags:
      - PresentCars
  /fyc/presentcars/{id}:
    delete:
      description: Delete a present car by ID
      parameters:
      - description: Present Car ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Delete a present car
      tags:
      - PresentCars
    put:
      consumes:
      - application/json
      description: Update an existing present car by ID
      parameters:
      - description: Present Car ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated present car data
        in: body
        name: presentCar
        required: true
        schema:
          $ref: '#/definitions/pkg.PresentCar'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.PresentCar'
      summary: Update a present car by ID
      tags:
      - PresentCars
  /fyc/presentcars/{lpn}:
    get:
      description: Get a specific present car by LPN
      parameters:
      - description: License Plate Number
        in: path
        name: lpn
        required: true
        type: string
      - description: Include extra information if 'yes'
        in: query
        name: extra
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.PresentCar'
      summary: Get present car by LPN
      tags:
      - PresentCars
  /fyc/settings:
    get:
      description: Get settings by CarPark ID
      parameters:
      - description: CarPark ID
        in: query
        name: carpark_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.Settings'
      summary: Get settings by CarPark ID
      tags:
      - Settings
    post:
      consumes:
      - application/json
      description: Add new settings for a CarPark
      parameters:
      - description: Settings data
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/pkg.Settings'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pkg.Settings'
      summary: Add new settings
      tags:
      - Settings
    put:
      consumes:
      - application/json
      description: Update an existing settings by CarPark ID
      parameters:
      - description: CarPark ID
        in: query
        name: carpark_id
        required: true
        type: integer
      - description: Updated settings data
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/pkg.Settings'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.Settings'
      summary: Update settings by CarPark ID
      tags:
      - Settings
  /fyc/sign:
    delete:
      description: Soft delete a sign by setting the is_deleted flag to true
      parameters:
      - description: sign ID
        in: query
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: sign deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid sign ID
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to delete sign
          schema:
            additionalProperties: true
            type: object
      summary: Soft delete a sign
      tags:
      - Sign
    get:
      description: Get a list of sign or a specific sign by ID with optional extra
        data
      parameters:
      - description: sign ID
        in: query
        name: id
        type: integer
      - description: Include extra information if 'yes'
        in: query
        name: extra
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of sign or a single sign
          schema:
            $ref: '#/definitions/pkg.Sign'
        "400":
          description: 'Bad request: Invalid sign ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: No sign found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get sign or specific sign by ID
      tags:
      - Sign
    post:
      consumes:
      - application/json
      description: Add a new sign to the database
      parameters:
      - description: sign data
        in: body
        name: sign
        required: true
        schema:
          $ref: '#/definitions/pkg.Sign'
      produces:
      - application/json
      responses:
        "201":
          description: sign created successfully
          schema:
            $ref: '#/definitions/pkg.Sign'
        "400":
          description: Invalid request payload
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to create a new sign
          schema:
            additionalProperties: true
            type: object
      summary: Add a new sign
      tags:
      - Sign
    put:
      consumes:
      - application/json
      description: Update an existing sign by ID
      parameters:
      - description: sign ID
        in: query
        name: id
        required: true
        type: integer
      - description: Updated sign data
        in: body
        name: sign
        required: true
        schema:
          $ref: '#/definitions/pkg.Sign'
      produces:
      - application/json
      responses:
        "200":
          description: sign updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request payload or ID mismatch
          schema:
            additionalProperties: true
            type: object
        "404":
          description: sign not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to update sign
          schema:
            additionalProperties: true
            type: object
      summary: Update a sign by ID
      tags:
      - Sign
  /fyc/signDeleted:
    get:
      description: Get a list of deleted sign or a specific sign by ID with optional
        extra data
      parameters:
      - description: sign ID
        in: query
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of deleted sign or a single sign
          schema:
            $ref: '#/definitions/pkg.Sign'
        "400":
          description: 'Bad request: Invalid sign ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: No sign found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get deleted sign or a specific sign by ID
      tags:
      - Sign
  /fyc/signEnabled:
    get:
      description: Get a list of enabled sign or a specific sign by ID with optional
        extra data
      parameters:
      - description: sign ID
        in: query
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of enabled sign or a single sign
          schema:
            $ref: '#/definitions/pkg.Sign'
        "400":
          description: 'Bad request: Invalid sign ID'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: No sign found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get enabled sign or a specific sign by ID
      tags:
      - Sign
  /fyc/signState:
    put:
      description: Change the state of a sign (e.g., enabled/disabled) or retrieve
        a sign by ID
      parameters:
      - description: sign State
        in: query
        name: state
        type: boolean
      - description: sign ID
        in: query
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Number of rows affected by the state change
          schema:
            type: integer
        "400":
          description: 'Bad request: Invalid sign ID or state'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: No sign found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Change sign state or retrieve sign by ID
      tags:
      - Sign
  /fyc/user:
    delete:
      description: Delete a Use by username
      parameters:
      - description: Username
        in: query
        name: username
        required: true
        type: string
      responses:
        "200":
          description: User deleted successfully
          schema:
            type: string
      summary: Delete a cUse
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Add a new User credential to the database
      parameters:
      - description: User data
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/pkg.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pkg.User'
      summary: Add a new User credential
      tags:
      - Users
  /fyc/user/{id}:
    put:
      consumes:
      - application/json
      description: Update an existing client credential by ID
      parameters:
      - description: Client ID
        in: query
        name: username
        required: true
        type: string
      - description: Updated client credential data
        in: body
        name: clientCred
        required: true
        schema:
          $ref: '#/definitions/pkg.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.User'
      summary: Update a client credential
      tags:
      - Users
  /fyc/userDeleted:
    get:
      description: Get a list of deleted Users or a specific User by username with
        optional extra data
      parameters:
      - description: username
        in: query
        name: username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of deleted Users or a User
          schema:
            $ref: '#/definitions/pkg.User'
      summary: Get deleted User or a specific User by username
      tags:
      - Users
  /fyc/userEnabled:
    get:
      description: Get a list of enabled users or a specific user by ID with optional
        extra data
      parameters:
      - description: UserName
        in: query
        name: username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of enabled Users or a single User
          schema:
            $ref: '#/definitions/pkg.User'
      summary: Get enabled User or a specific User by username
      tags:
      - Users
  /fyc/userState:
    put:
      description: Change the state of a user (e.g., enabled/disabled) or retrieve
        a user by username
      parameters:
      - description: Client State
        in: query
        name: state
        type: boolean
      - description: Username
        in: query
        name: username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Number of rows affected by the state change
          schema:
            type: integer
      summary: Change user state or retrieve user by username
      tags:
      - Users
  /fyc/users:
    get:
      description: Get a list of all Users
      parameters:
      - description: Username
        in: query
        name: username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/pkg.User'
            type: array
      summary: Get all Users
      tags:
      - Users
  /fyc/v1/Auth/token:
    post:
      consumes:
      - application/json
      description: Generates a JWT token using client ID and client secret.
      parameters:
      - description: Client credentials
        in: body
        name: TokenRequest
        required: true
        schema:
          $ref: '#/definitions/pkg.TokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token generated successfully
          schema:
            $ref: '#/definitions/pkg.TokenResponse'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: Invalid client credentials
          schema:
            type: string
        "405":
          description: Method not allowed
          schema:
            type: string
      summary: Generate a JWT token
      tags:
      - Test_Version1
  /fyc/zoneState:
    put:
      description: Change the state of a Zone (e.g., enabled/disabled) or retrieve
        a Zone by ID
      parameters:
      - description: Zone State
        in: query
        name: state
        type: boolean
      - description: Zone ID
        in: query
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Number of rows affected by the state change
          schema:
            type: integer
      summary: Change Zone state or retrieve Zones by ID
      tags:
      - Zones
  /fyc/zones:
    get:
      description: Get a list of all zones, or a zone by ID if 'id' parameter is provided
      parameters:
      - description: Include extra information if 'yes'
        in: query
        name: extra
        type: string
      - description: Zone ID
        in: query
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of zones or a single zone
          schema:
            items:
              $ref: '#/definitions/pkg.Zone'
            type: array
      summary: Get all zones
      tags:
      - Zones
    post:
      consumes:
      - application/json
      description: Add a new zone to the database
      parameters:
      - description: Zone data
        in: body
        name: zone
        required: true
        schema:
          $ref: '#/definitions/pkg.Zone'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pkg.Zone'
      summary: Add a new zone
      tags:
      - Zones
  /fyc/zones/{id}:
    delete:
      description: Delete a zone by ID
      parameters:
      - description: Zone ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Zone deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Zone not found
          schema:
            additionalProperties: true
            type: object
      summary: Delete a zone
      tags:
      - Zones
    put:
      consumes:
      - application/json
      description: Update an existing zone by ID
      parameters:
      - description: Zone ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated zone data
        in: body
        name: zone
        required: true
        schema:
          $ref: '#/definitions/pkg.Zone'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.Zone'
      summary: Update a zone by ID
      tags:
      - Zones
  /fyc/zonesDeleted:
    get:
      description: Get a list of Deleted zones or a specific zone by ID with optional
        extra data
      parameters:
      - description: Zone ID
        in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of Deleted zones or a single zone
          schema:
            $ref: '#/definitions/pkg.Zone'
      summary: Get Deleted zones or a specific zone by ID
      tags:
      - Zones
  /fyc/zonesEnabled:
    get:
      description: Get a list of enabled zones or a specific zone by ID with optional
        extra data
      parameters:
      - description: Zone ID
        in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of enabled zones or a single zone
          schema:
            items:
              $ref: '#/definitions/pkg.Zone'
            type: array
      summary: Get enabled zones or a specific zone by ID
      tags:
      - Zones
  /fyc/zonesImage:
    get:
      description: Get a specific zoneimage by either ID or Zone
      parameters:
      - description: Search by field (id or zone)
        in: query
        name: field
        required: true
        type: string
      - description: Value of the selected field
        in: query
        name: value
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.ImageZone'
      summary: Get zoneimage by field
      tags:
      - Zones Image
    post:
      consumes:
      - application/json
      description: Add a new zone image to the database
      parameters:
      - description: Zone image data
        in: body
        name: ImageZone
        required: true
        schema:
          $ref: '#/definitions/pkg.ImageZone'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pkg.ImageZone'
      summary: Add a new zone Image
      tags:
      - Zones Image
  /fyc/zonesImage/{id}:
    delete:
      description: Delete a zone image by ID
      parameters:
      - description: Zone image ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Zone image deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Zone image not found
          schema:
            additionalProperties: true
            type: object
      summary: Delete a zone image
      tags:
      - Zones Image
    put:
      consumes:
      - application/json
      description: Update an existing zone image by ID
      parameters:
      - description: Zone ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated zone image data
        in: body
        name: Zone
        required: true
        schema:
          $ref: '#/definitions/pkg.ImageZone'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.Zone'
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Zone image not found
          schema:
            additionalProperties: true
            type: object
      summary: Update a zone image by ID
      tags:
      - Zones Image
  /fyc/zonesImages:
    get:
      description: Get a list of all zones images
      parameters:
      - description: Include extra information if 'yes'
        in: query
        name: extra
        type: string
      - description: choose the image type Small or Large (small or sm for Small Images
          / lg or large for Large )
        in: query
        name: typeImage
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/pkg.ImageZone'
            type: array
      summary: Get all zones images
      tags:
      - Zones Image
  /getSettings:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: |-
        Get Settings
        Get settings data --- Token is eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.Settings'
      summary: Get Settings
      tags:
      - Car Location
  /getpicture:
    get:
      description: Get an image using the picture name --- Token is eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
      parameters:
      - description: Picture Name
        in: query
        name: picture_name
        required: true
        type: string
      - description: Language
        in: query
        name: language
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.PictureResponse'
      summary: Get a picture by picture name
      tags:
      - Car Location
  /token:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: |-
        Get an access token using client credentials
        Valide PARAMS ---------- Client ID : 6 / Client Secret : 4711 / grant_type : client_credentials
      parameters:
      - description: Client ID
        in: formData
        name: client_id
        required: true
        type: string
      - description: Client Secret
        in: formData
        name: client_secret
        required: true
        type: string
      - description: Grant Type
        in: formData
        name: grant_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.TokenResponseTest'
      summary: Get an access token
      tags:
      - Car Location
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
